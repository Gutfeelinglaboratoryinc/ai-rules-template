---
description: 
globs: 
alwaysApply: false
---
# タスク依頼書作成ルール

## 適用条件
- ファイルパス：`docs/task-request/**/*.md`
- 作業指示・タスク依頼のドキュメント作成時に適用

## タスク依頼書テンプレート

タスク依頼書を作成する際は、以下のテンプレートを必ず使用してください：

```markdown
# タスク依頼：[タスク名]

## 📋 基本情報
- **依頼者**：[依頼者名]
- **担当者**：[担当者名]
- **期限**：[YYYY-MM-DD]
- **優先度**：[高/中/低]
- **工数見積**：[時間単位]

## 🎯 背景・目的
### 背景
[なぜこのタスクが必要なのか、現状の課題を説明]

### 目的
[このタスクで達成したいゴール、期待する成果]

### 影響範囲
[このタスクが影響するシステム・ユーザー・業務]

## 📝 作業内容詳細

### 実装対象
- [ ] [具体的な作業項目1]
- [ ] [具体的な作業項目2]
- [ ] [具体的な作業項目3]

### 処理シーケンス
```mermaid
sequenceDiagram
    participant User as ユーザー
    participant Frontend as フロントエンド
    participant Backend as バックエンド
    participant Database as データベース

    User->>Frontend: [操作内容]
    Frontend->>Backend: [APIリクエスト]
    Backend->>Database: [データ操作]
    Database-->>Backend: [レスポンス]
    Backend-->>Frontend: [処理結果]
    Frontend-->>User: [画面表示]
```

### 入力・出力定義
#### 入力
| 項目名 | 型 | 必須 | 説明 | 例 |
|--------|----|----|------|-----|
| [項目名] | [型] | [○/×] | [説明] | [例] |

#### 出力
| 項目名 | 型 | 説明 | 例 |
|--------|----|------|-----|
| [項目名] | [型] | [説明] | [例] |

## 🔍 要件・制約事項

### 機能要件
- [機能要件1]
- [機能要件2]

### 非機能要件
- **パフォーマンス**：[レスポンス時間、スループット等]
- **セキュリティ**：[認証・認可、データ保護等]
- **可用性**：[稼働率、ダウンタイム等]

### 制約事項
- [技術的制約]
- [スケジュール制約]
- [リソース制約]

## ✅ バリデーション仕様

### 入力バリデーション
| 項目 | バリデーションルール | エラーメッセージ |
|------|-------------------|-----------------|
| [項目名] | [ルール] | [メッセージ] |

### ビジネスロジック検証
- [検証項目1とその条件]
- [検証項目2とその条件]

## 🧪 テスト仕様

### ユニットテスト例
```javascript
describe('[機能名]', () => {
  test('正常系：[テストケース名]', () => {
    // Given
    const input = { /* テストデータ */ };
    
    // When
    const result = targetFunction(input);
    
    // Then
    expect(result).toEqual({ /* 期待値 */ });
  });
  
  test('異常系：[エラーケース名]', () => {
    // Given
    const invalidInput = { /* 異常データ */ };
    
    // When & Then
    expect(() => targetFunction(invalidInput))
      .toThrow('[期待するエラーメッセージ]');
  });
});
```

### 統合テストシナリオ
1. [シナリオ1の説明]
   - 前提条件：[条件]
   - 実行手順：[手順]
   - 期待結果：[結果]

## 📚 参考資料
- [関連ドキュメントのリンク]
- [外部仕様書のリンク]
- [参考実装のリンク]

## 🔄 完了条件
- [ ] 機能実装完了
- [ ] ユニットテスト作成・実行完了
- [ ] 統合テスト実行完了
- [ ] コードレビュー完了
- [ ] ドキュメント更新完了

---
**作成日**：[YYYY-MM-DD]  
**最終更新**：[YYYY-MM-DD]
```

## 記述ルール

### 必須項目
以下の項目は必ず記述すること：
- **基本情報**（依頼者、担当者、期限、工数見積）
- **背景・目的**（なぜ必要か、何を達成したいか）
- **作業内容詳細**（具体的な作業項目）
- **処理シーケンス**（mermaid形式でシステム間の処理フローを記述）
- **入力・出力定義**（データ形式を明確化）
- **バリデーション仕様**（入力検証ルール）
- **ユニットテスト例**（最低1つの正常系・異常系）

### 記述品質
- **具体性**：「〜を改善する」ではなく「〜の処理時間を500ms以下にする」
- **測定可能性**：「高速化」ではなく「レスポンス時間50%短縮」
- **完了条件明確化**：「完了」ではなく「テスト実行でエラー0件」
- **処理フロー明確化**：mermaidシーケンス図で参加者（システム・ユーザー）間の処理流れを視覚的に表現

### 工数見積ガイドライン
- **小**：1-8時間（単一機能の追加・修正）
- **中**：1-3日（複数機能にまたがる実装）
- **大**：4日以上（システム全体に影響する変更）

## チェックリスト

タスク依頼書作成後、以下をAIが自動チェック：

### 📋 必須項目チェック
- [ ] 基本情報が全て記入されているか？
- [ ] 背景・目的が明確に記述されているか？
- [ ] 処理シーケンスがmermaid形式で記述されているか？
- [ ] 入力・出力定義がテーブル形式で記述されているか？
- [ ] バリデーション仕様が具体的に記述されているか？
- [ ] ユニットテスト例が記述されているか？

### 🎯 品質チェック
- [ ] 作業内容が具体的で測定可能か？
- [ ] 完了条件が明確に定義されているか？
- [ ] 工数見積が適切な範囲内か？
- [ ] 関連する機能設計書が存在するか？

---

このルールに従ってタスク依頼書を作成することで、実装者との認識齟齬を防ぎ、
効率的な開発進行を実現します。
