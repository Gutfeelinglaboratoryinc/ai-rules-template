---
description: 
globs: 
alwaysApply: false
---
# 機能設計書作成ルール

## 適用条件
- ファイルパス：`docs/feature-spec/**/*.md`
- 機能仕様・設計ドキュメント作成時に適用

## 機能設計書テンプレート

機能設計書を作成する際は、以下のテンプレートを必ず使用してください：

```markdown
# 機能設計：[機能名]

## 📋 基本情報
- **機能ID**：[FEA-XXXX]
- **設計者**：[設計者名]
- **レビュー担当**：[レビュー担当者名]
- **作成日**：[YYYY-MM-DD]
- **最終更新**：[YYYY-MM-DD]
- **ステータス**：[設計中/レビュー中/承認済み/実装中/完了]

## 🎯 機能概要

### 機能説明
[この機能が何をするものか、簡潔に説明]

### ビジネス価値
[この機能がもたらすビジネス価値・解決する課題]

### 対象ユーザー
- [ユーザータイプ1]：[利用シーン]
- [ユーザータイプ2]：[利用シーン]

## 🏗️ アーキテクチャ設計

### システム構成図
```mermaid
graph TD
    A[Client] --> B[API Gateway]
    B --> C[Application Server]
    C --> D[Database]
    C --> E[External Service]
```

### コンポーネント構成
| コンポーネント | 責務 | 技術スタック |
|---------------|------|-------------|
| [コンポーネント名] | [責務説明] | [技術] |

## 🚀 API仕様

### エンドポイント一覧
| メソッド | エンドポイント | 説明 | 認証 |
|---------|---------------|------|------|
| GET | `/api/v1/[resource]` | [説明] | [要/不要] |
| POST | `/api/v1/[resource]` | [説明] | [要/不要] |
| PUT | `/api/v1/[resource]/{id}` | [説明] | [要/不要] |
| DELETE | `/api/v1/[resource]/{id}` | [説明] | [要/不要] |

### API詳細仕様

#### GET /api/v1/[resource]
**概要**：[API機能の概要]

**リクエスト**
- **HTTPメソッド**：GET
- **URL**：`/api/v1/[resource]`
- **認証**：[Bearer Token / API Key / なし]

**クエリパラメータ**
| パラメータ | 型 | 必須 | 説明 | 例 |
|-----------|----|----|------|-----|
| page | integer | × | ページ番号 | 1 |
| limit | integer | × | 取得件数 | 20 |
| sort | string | × | ソート条件 | "created_at:desc" |

**レスポンス**
```json
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "name": "example",
      "created_at": "2024-01-01T00:00:00Z"
    }
  ],
  "pagination": {
    "current_page": 1,
    "total_pages": 10,
    "total_count": 200
  }
}
```

**エラーレスポンス**
```json
{
  "status": "error",
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Invalid parameter",
    "details": [
      {
        "field": "limit",
        "message": "Must be between 1 and 100"
      }
    ]
  }
}
```

#### POST /api/v1/[resource]
**概要**：[API機能の概要]

**リクエスト**
- **HTTPメソッド**：POST
- **URL**：`/api/v1/[resource]`
- **Content-Type**：`application/json`

**リクエストボディ**
```json
{
  "name": "string (required)",
  "description": "string (optional)",
  "category_id": "integer (required)"
}
```

**バリデーションルール**
| フィールド | ルール | エラーメッセージ |
|-----------|--------|-----------------|
| name | 必須、1-100文字 | "名前は必須です（1-100文字）" |
| description | 最大500文字 | "説明は500文字以内で入力してください" |
| category_id | 必須、存在するID | "有効なカテゴリを選択してください" |

**レスポンス（成功）**
```json
{
  "status": "success",
  "data": {
    "id": 1,
    "name": "example",
    "description": "description",
    "category_id": 1,
    "created_at": "2024-01-01T00:00:00Z"
  }
}
```

## 💾 データベース設計

### テーブル設計
#### [table_name] テーブル
| カラム名 | 型 | NULL | デフォルト | 説明 |
|---------|----|----|----------|------|
| id | INTEGER | NOT NULL | AUTO_INCREMENT | 主キー |
| name | VARCHAR(100) | NOT NULL | - | 名前 |
| created_at | TIMESTAMP | NOT NULL | CURRENT_TIMESTAMP | 作成日時 |
| updated_at | TIMESTAMP | NOT NULL | CURRENT_TIMESTAMP | 更新日時 |

### インデックス設計
| インデックス名 | カラム | 種類 | 用途 |
|---------------|--------|------|------|
| idx_[table]_name | name | UNIQUE | 名前検索 |
| idx_[table]_created_at | created_at | INDEX | 日時ソート |

### 制約事項
- [制約事項1]
- [制約事項2]

## 🔒 セキュリティ設計

### 認証・認可
- **認証方式**：[JWT / OAuth2 / API Key]
- **権限レベル**：[Admin / User / Guest]
- **アクセス制御**：[RBAC / ABAC]

### 入力検証
- **SQLインジェクション対策**：プリペアドステートメント使用
- **XSS対策**：出力時HTMLエスケープ
- **CSRF対策**：CSRFトークン検証

### データ保護
- **暗号化**：[対象データと暗号化方式]
- **個人情報**：[匿名化・仮名化方針]
- **ログ管理**：[ログレベルと保存期間]

## ⚡ パフォーマンス設計

### 性能要件
| 項目 | 要件 | 測定方法 |
|------|------|----------|
| レスポンス時間 | < 500ms | API監視ツール |
| スループット | > 1000 req/sec | 負荷テスト |
| 稼働率 | > 99.9% | サービス監視 |

### 最適化戦略
- **キャッシュ戦略**：[Redis / Memcached / CDN]
- **クエリ最適化**：[インデックス設計 / N+1問題対策]
- **並行処理**：[非同期処理 / バックグラウンドジョブ]

## 🧪 テスト戦略

### テスト項目
#### 単体テスト
- [ ] 入力バリデーション
- [ ] ビジネスロジック
- [ ] エラーハンドリング

#### 統合テスト
- [ ] API エンドポイント
- [ ] データベース連携
- [ ] 外部サービス連携

#### E2Eテスト
- [ ] ユーザーシナリオ1
- [ ] ユーザーシナリオ2

### テストデータ
```json
{
  "valid_input": {
    "name": "テスト商品",
    "description": "テスト用の商品です",
    "category_id": 1
  },
  "invalid_input": {
    "name": "",
    "description": "x".repeat(501),
    "category_id": 999
  }
}
```

## 📊 監視・運用

### 監視項目
- **システムメトリクス**：CPU、メモリ、ディスク使用率
- **アプリケーションメトリクス**：レスポンス時間、エラー率
- **ビジネスメトリクス**：API利用数、ユーザー数

### アラート設定
| 項目 | 閾値 | 通知先 |
|------|------|--------|
| レスポンス時間 | > 1秒 | 開発チーム |
| エラー率 | > 5% | 開発チーム |
| 稼働率 | < 99% | 運用チーム |

## 🔄 リリース計画

### フェーズ設計
#### Phase 1（MVP）
- [ ] 基本CRUD機能
- [ ] 認証機能
- [ ] 基本バリデーション

#### Phase 2（機能拡張）
- [ ] 検索・ソート機能
- [ ] 一括操作
- [ ] 高度なバリデーション

#### Phase 3（最適化）
- [ ] パフォーマンス最適化
- [ ] 監視機能強化
- [ ] ユーザビリティ改善

### ロールバック戦略
- **データベース**：マイグレーションファイルでバージョン管理
- **アプリケーション**：Blue-Green デプロイメント
- **設定**：設定ファイルのバージョン管理

---
**承認者**：[承認者名]  
**承認日**：[YYYY-MM-DD]
```

## 記述ルール

### 必須セクション
以下のセクションは必ず記述すること：
- **基本情報**（機能ID、設計者、ステータス）
- **機能概要**（機能説明、ビジネス価値）
- **API仕様**（エンドポイント、リクエスト/レスポンス）
- **データベース設計**（テーブル設計、制約事項）
- **セキュリティ設計**（認証・認可、データ保護）
- **テスト戦略**（テスト項目、テストデータ）

### API仕様記述ルール
- **エンドポイントURL**：RESTful設計に従う
- **HTTPメソッド**：適切なメソッドを使用（GET/POST/PUT/DELETE）
- **リクエスト/レスポンス**：JSON形式で記述
- **エラーハンドリング**：統一されたエラーレスポンス形式
- **バリデーション**：全入力項目のバリデーションルールを明記

### データ形式統一
- **日時**：ISO 8601形式（YYYY-MM-DDTHH:mm:ssZ）
- **ID**：整数型、AUTO_INCREMENT
- **フラグ**：boolean型（true/false）
- **文字列**：UTF-8エンコーディング

## チェックリスト

機能設計書作成後、以下をAIが自動チェック：

### 📋 必須項目チェック
- [ ] 全必須セクションが記述されているか？
- [ ] API仕様が網羅的に記述されているか？
- [ ] データベース設計が適切か？
- [ ] セキュリティ要件が定義されているか？
- [ ] テスト戦略が具体的か？

### 🎯 品質チェック
- [ ] エンドポイントがRESTful設計に従っているか？
- [ ] エラーレスポンスが統一されているか？
- [ ] パフォーマンス要件が数値で定義されているか？
- [ ] 監視項目が運用可能なレベルで定義されているか？

### 🔗 整合性チェック
- [ ] 関連するタスク依頼書が存在するか？
- [ ] 他機能との連携点が明記されているか？
- [ ] データベース設計がAPI仕様と整合しているか？

---

この機能設計書に従って実装することで、一貫性のある高品質なシステム開発を実現します。
