---
description: 
globs: 
alwaysApply: false
---
# 基本開発ルール（全プロジェクト共通）

alwaysApply: true

## 命名規則

### ファイル・ディレクトリ名
- ファイル名：`snake_case`を使用（例：`user_service.ts`, `product_controller.js`）
- ディレクトリ名：`kebab-case`を使用（例：`user-management/`, `feature-spec/`）
- 設定ファイル：慣例に従う（例：`package.json`, `.env`, `docker-compose.yml`）

### 変数・関数・クラス名
- 変数名・関数名：`camelCase`を使用（例：`userName`, `getUserById()`）
- クラス名：`PascalCase`を使用（例：`UserService`, `ProductController`）
- 定数：`SCREAMING_SNAKE_CASE`を使用（例：`MAX_RETRY_COUNT`, `API_BASE_URL`）
- プライベートメソッド・プロパティ：先頭に`_`をつける（例：`_validateInput()`）

## コメント・ドキュメント規則

### 必須コメント
- **すべての関数・メソッド**にJSDocコメントを記述
- **複雑なロジック**には行内コメントで説明
- **設定値・マジックナンバー**には理由を説明

### JSDocフォーマット
```javascript
/**
 * ユーザー情報を取得する
 * @param {string} userId - ユーザーID
 * @param {Object} options - オプション設定
 * @param {boolean} options.includeProfile - プロフィール情報を含むか
 * @returns {Promise<Object>} ユーザー情報オブジェクト
 * @throws {Error} ユーザーが見つからない場合
 */
```

### TODOコメント
- `TODO:` - 将来実装予定の機能
- `FIXME:` - 修正が必要な既知の問題
- `HACK:` - 一時的な回避策（理由も併記）

## コード品質

### エラーハンドリング
- すべての非同期処理でエラーハンドリングを実装
- ユーザー向けエラーメッセージは分かりやすく記述
- ログ出力時は適切なログレベルを設定

### セキュリティ
- 入力値は必ずバリデーション・サニタイズを実行
- 機密情報（API Key、パスワード等）は環境変数で管理
- SQLインジェクション・XSS対策を実装

## プルリクエスト（PR）前チェック項目

新機能・修正のPR時は以下をAIが自動チェックします：

### 📋 必須ドキュメント
- [ ] 機能設計書があるか？（`docs/feature-spec/` 配下）
- [ ] タスク依頼書があるか？（`docs/task-request/` 配下）
- [ ] API仕様が更新されているか？（該当する場合）

### 🧪 テスト
- [ ] ユニットテストが作成されているか？
- [ ] テストカバレッジが80%以上か？
- [ ] エッジケースのテストが含まれているか？

### 📝 コード品質
- [ ] JSDocコメントが記述されているか？
- [ ] 命名規則に従っているか？
- [ ] エラーハンドリングが実装されているか？
- [ ] セキュリティ要件を満たしているか？

### 🔍 レビュー観点
- [ ] 機能設計書通りに実装されているか？
- [ ] パフォーマンスに問題はないか？
- [ ] 他機能への影響はないか？
- [ ] ログ出力は適切か？

## 例外ルール

以下の場合は一部ルールを緩和可能：
- プロトタイプ・概念実証（PoC）の場合
- 外部ライブラリの制約がある場合
- レガシーコード改修時（段階的対応）

例外適用時は、PR説明に理由を明記すること。

---

このルールはプロジェクト全体に適用されます。
より詳細な技術スタック固有のルールは、各専用ルールファイルを参照してください。
