---
description: 
globs: 
alwaysApply: false
---
# バックエンド共通ルール（言語非依存）

## 適用条件
- バックエンド・サーバーサイド開発全般に適用
- 言語固有のルールは各言語専用ファイルを参照

## アーキテクチャパターン

### レイヤードアーキテクチャ
```
src/
├── controllers/     # API層 - HTTPリクエスト/レスポンス処理
├── services/        # ビジネスロジック層 - ドメインロジック
├── repositories/    # データアクセス層 - データ永続化
├── models/          # ドメインモデル - エンティティ・DTO
├── middlewares/     # 横断的関心事 - 認証、ログ、CORS
├── utils/           # ユーティリティ - 共通機能
├── config/          # 設定管理 - 環境変数、DB接続
└── tests/           # テストコード
```

### 責務分離の原則
- **Controller**: HTTPプロトコル処理、入力バリデーション、レスポンス整形
- **Service**: ビジネスルール実装、複数リポジトリの協調、トランザクション管理
- **Repository**: データ永続化、クエリ実装、データマッピング
- **Model**: データ構造定義、バリデーションルール、ドメインロジック

### ドメイン駆動設計（DDD）適用
- **Entity**: 一意性を持つオブジェクト
- **Value Object**: 値の等価性で識別されるオブジェクト
- **Aggregate**: 関連するエンティティの集約
- **Domain Service**: ドメイン固有のビジネスロジック

## API設計原則

### RESTful API設計
```
# リソース指向URL設計
GET    /api/v1/users          # 一覧取得
GET    /api/v1/users/{id}     # 個別取得
POST   /api/v1/users          # 新規作成
PUT    /api/v1/users/{id}     # 全体更新
PATCH  /api/v1/users/{id}     # 部分更新
DELETE /api/v1/users/{id}     # 削除

# ネストしたリソース
GET    /api/v1/users/{id}/posts      # ユーザーの投稿一覧
POST   /api/v1/users/{id}/posts      # ユーザーの投稿作成
```

### HTTPステータスコード規約
- **2xx 成功**
  - `200 OK`: 取得・更新成功
  - `201 Created`: 作成成功
  - `204 No Content`: 削除成功（レスポンスボディなし）
- **4xx クライアントエラー**
  - `400 Bad Request`: リクエスト形式不正
  - `401 Unauthorized`: 認証必要
  - `403 Forbidden`: 権限不足
  - `404 Not Found`: リソース未存在
  - `409 Conflict`: 競合エラー（重複等）
  - `422 Unprocessable Entity`: バリデーションエラー
- **5xx サーバーエラー**
  - `500 Internal Server Error`: サーバー内部エラー
  - `503 Service Unavailable`: サービス利用不可

### 統一レスポンス形式
```json
// 成功レスポンス
{
  "status": "success",
  "data": { ... },
  "message": "操作が正常に完了しました"
}

// エラーレスポンス
{
  "status": "error",
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "入力データが不正です",
    "details": [
      {
        "field": "email",
        "message": "有効なメールアドレスを入力してください"
      }
    ]
  }
}

// ページネーション
{
  "status": "success",
  "data": [...],
  "pagination": {
    "current_page": 1,
    "total_pages": 10,
    "total_count": 200,
    "per_page": 20,
    "has_next": true,
    "has_previous": false
  }
}
```

## セキュリティ設計

### 認証・認可
- **認証方式**: JWT Bearer Token または OAuth 2.0
- **トークン管理**: アクセストークン（短期）+ リフレッシュトークン（長期）
- **権限制御**: RBAC（Role-Based Access Control）実装

### 入力検証・サニタイゼーション
- **全入力値バリデーション**: 型、長さ、形式、範囲チェック
- **SQLインジェクション対策**: パラメータ化クエリ・ORM使用
- **XSS対策**: 出力時HTMLエスケープ
- **CSRF対策**: CSRFトークン検証（SPA以外）

### データ保護
- **機密情報暗号化**: パスワード（bcrypt）、個人情報（AES-256）
- **環境変数管理**: API Key、DB接続情報は環境変数で管理
- **ログマスキング**: 機密情報のログ出力を禁止

## データベース設計

### 設計原則
- **正規化**: 第3正規形まで適用（パフォーマンス要件に応じて非正規化）
- **制約設定**: PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL適切に設定
- **インデックス**: 検索・ソート対象カラムにインデックス作成
- **命名規則**: snake_case使用、複数形テーブル名

### マイグレーション管理
- **バージョン管理**: UP/DOWNスクリプト両方作成
- **段階的適用**: 本番環境では段階的にマイグレーション実行
- **ロールバック計画**: 問題発生時の巻き戻し手順を事前定義

### パフォーマンス最適化
- **N+1問題対策**: JOIN使用、バッチローディング
- **クエリ最適化**: 実行計画確認、インデックス活用
- **コネクションプール**: DB接続数制御

## エラーハンドリング

### エラー分類
- **ビジネスエラー**: ドメインルール違反（400番台レスポンス）
- **システムエラー**: インフラ障害、外部サービス不通（500番台）
- **バリデーションエラー**: 入力値不正（422レスポンス）

### ログ出力
- **構造化ログ**: JSON形式で出力
- **ログレベル**: DEBUG, INFO, WARN, ERROR適切に使い分け
- **コンテキスト情報**: リクエストID、ユーザーID、タイムスタンプ含む

### 障害対応
- **サーキットブレーカー**: 外部サービス障害時の自動遮断
- **リトライ機能**: 一時的障害時の自動再試行（指数バックオフ）
- **フェイルファスト**: 早期エラー検出・通知

## テスト戦略

### テストピラミッド
```
        /\
       /  \        E2Eテスト（少数・高コスト）
      /____\
     /      \      統合テスト（中程度）
    /________\
   /          \    単体テスト（多数・低コスト）
  /__________\
```

### テスト種別
- **単体テスト**: 関数・メソッド単位、モック使用
- **統合テスト**: API エンドポイント、DB接続テスト
- **契約テスト**: 外部サービス連携、API スキーマ検証
- **E2Eテスト**: ユーザーシナリオ全体

### テストデータ管理
- **テストフィクスチャ**: 再利用可能なテストデータ定義
- **データベースリセット**: テスト毎にクリーンな状態を保証
- **モック・スタブ**: 外部依存を排除

## パフォーマンス・スケーラビリティ

### キャッシュ戦略
- **アプリケーションキャッシュ**: Redis/Memcached活用
- **データベースキャッシュ**: クエリ結果キャッシュ
- **CDN**: 静的リソース配信

### 非同期処理
- **バックグラウンドジョブ**: 重い処理を非同期実行
- **メッセージキュー**: タスク分散処理
- **イベント駆動**: 疎結合なシステム連携

### 監視・可観測性
- **メトリクス**: レスポンス時間、スループット、エラー率
- **ログ集約**: 分散ログの中央集約
- **分散トレーシング**: マイクロサービス間の処理追跡
- **ヘルスチェック**: サービス生存確認

## デプロイメント・運用

### CI/CD パイプライン
- **自動テスト**: コミット時の自動テスト実行
- **静的解析**: コード品質チェック
- **セキュリティスキャン**: 脆弱性検出
- **段階的デプロイ**: dev → staging → production

### コンテナ化
- **Docker**: アプリケーションコンテナ化
- **マルチステージビルド**: 本番用軽量イメージ作成
- **ヘルスチェック**: コンテナ生存確認

### 設定管理
- **環境別設定**: dev/staging/prod環境ごとの設定分離
- **シークレット管理**: 機密情報の安全な管理
- **設定値検証**: 起動時設定値の妥当性確認

## API ドキュメント

### OpenAPI/Swagger
- **スキーマ定義**: API仕様の正確な記述
- **自動生成**: コードからドキュメント自動生成
- **インタラクティブ**: Swagger UI でのAPI試行

### ドキュメント品質
- **例示**: リクエスト/レスポンスサンプル記載
- **エラーケース**: 各エラーパターンの説明
- **認証方法**: API認証手順の明記

---

この共通ルールは全てのバックエンド言語に適用されます。
言語固有の実装詳細は各言語専用ルールファイルを参照してください。
